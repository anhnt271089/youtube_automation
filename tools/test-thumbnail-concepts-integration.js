#!/usr/bin/env node

/**
 * Test Script for Thumbnail Concepts Integration
 * 
 * This script tests the new integration between stored Thumbnail Concepts in Video Detail Sheets
 * and the actual thumbnail generation process.
 * 
 * Usage:
 *   # Test with a specific video that has stored concepts
 *   node tools/test-thumbnail-concepts-integration.js --test-video VID-0001
 * 
 *   # Test the parsing mechanism with mock concepts
 *   node tools/test-thumbnail-concepts-integration.js --test-parsing
 * 
 *   # Test the full integration flow
 *   node tools/test-thumbnail-concepts-integration.js --test-integration
 */

import ThumbnailService from '../src/services/thumbnailService.js';
import GoogleSheetsService from '../src/services/googleSheetsService.js';
import AIService from '../src/services/aiService.js';
import GoogleDriveService from '../src/services/googleDriveService.js';
import logger from '../src/utils/logger.js';

class ThumbnailConceptsIntegrationTester {
  constructor() {
    this.googleSheetsService = new GoogleSheetsService();
    this.aiService = new AIService();
    this.googleDriveService = new GoogleDriveService();
    this.thumbnailService = new ThumbnailService(this.aiService, this.googleDriveService);
  }

  /**
   * Test parsing of stored thumbnail concepts
   */
  async testConceptParsing() {
    console.log('üß™ Testing thumbnail concept parsing...');
    
    // Mock stored concepts (similar to what would be generated by AIService)
    const mockConcepts = `
**CONCEPT 1: EMOTIONAL VIRAL OPTIMIZATION** 
CTR Target: 18-22%

NEUROLOGICAL TRIGGER: Curiosity Gap + Social Proof + Urgency
- Face-first design with 15-degree gaze toward text area  
- Shocked expression (8/10 intensity) with wide eyes occupying 10% thumbnail area
- Bold overlay text: "I Can't Believe This Works!" (56px Impact font)
- Secondary element: $10,000 visual metaphor (golden coins/cash stack)
- Color formula: #FF6B35 (aggressive orange) + #FFFFFF contrast = 15.8:1 ratio
- Mobile readability: Verified at 320x180px rendering

**CONCEPT 2: SCIENTIFIC AUTHORITY OPTIMIZATION**
CTR Target: 14-17%

NEUROLOGICAL TRIGGER: Authority + Credibility + Expertise  
- Professional headshot with confident expression (7/10 intensity)
- Clean typography hierarchy: Main text 48px Montserrat Bold
- Color psychology: #2C5AA0 (trust blue) + #F8F9FA (premium white)
- Visual authority markers: Chart/graph element, verification badge
- Whitespace optimization: 40% negative space for premium perception
- Scientific credibility: Data visualization element integrated
`;

    try {
      const parsedContext = this.thumbnailService.parseStoredThumbnailConcepts(mockConcepts, 'Test Video Title');
      
      console.log('\n‚úÖ Successfully parsed stored concepts:');
      console.log('   Main Theme:', parsedContext.mainTheme);
      console.log('   Emotional Tone:', parsedContext.emotionalTone);
      console.log('   Key Elements:', parsedContext.keyElements);
      console.log('   Color Suggestions:', parsedContext.colorSuggestions);
      console.log('   Visual Metaphors:', parsedContext.visualMetaphors);
      console.log('   Style 1 Details:', parsedContext.style1Details);
      console.log('   Style 2 Details:', parsedContext.style2Details);
      console.log('   Scientific Specs:', parsedContext.scientificSpecs);
      
      return true;
    } catch (error) {
      console.log('‚ùå Concept parsing test failed:', error.message);
      return false;
    }
  }

  /**
   * Test retrieving stored concepts for a specific video
   */
  async testConceptRetrieval(videoId) {
    console.log(`üß™ Testing concept retrieval for ${videoId}...`);
    
    try {
      const storedConcepts = await this.googleSheetsService.getStoredThumbnailConcepts(videoId);
      
      if (storedConcepts) {
        console.log(`‚úÖ Retrieved stored concepts for ${videoId}:`);
        console.log(`   Length: ${storedConcepts.length} characters`);
        console.log(`   Preview: ${storedConcepts.substring(0, 200)}...`);
        
        // Test parsing the retrieved concepts
        const parsedContext = this.thumbnailService.parseStoredThumbnailConcepts(storedConcepts, `Test Video ${videoId}`);
        console.log('‚úÖ Successfully parsed retrieved concepts');
        
        return { concepts: storedConcepts, parsed: parsedContext };
      } else {
        console.log(`üìã No stored concepts found for ${videoId}`);
        return { concepts: null, parsed: null };
      }
    } catch (error) {
      console.log(`‚ùå Concept retrieval test failed for ${videoId}:`, error.message);
      return { concepts: null, parsed: null, error: error.message };
    }
  }

  /**
   * Test the full integration flow (dry run - no actual thumbnail generation)
   */
  async testFullIntegration(videoId) {
    console.log(`üß™ Testing full integration flow for ${videoId}...`);
    
    try {
      // Step 1: Get video details
      const videoDetails = await this.googleSheetsService.getVideoDetails(videoId);
      if (!videoDetails) {
        throw new Error(`Video ${videoId} not found`);
      }
      
      console.log(`‚úÖ Found video: ${videoDetails.title}`);
      
      // Step 2: Check for stored concepts
      const conceptTest = await this.testConceptRetrieval(videoId);
      
      // Step 3: Simulate thumbnail generation context decision
      if (conceptTest.concepts) {
        console.log('üé® Integration would use STORED CONCEPTS for generation');
        console.log('   Source: Video Detail Sheet thumbnail concepts');
        console.log('   Quality: Advanced neurological triggers and scientific specifications');
      } else {
        console.log('ü§ñ Integration would use FRESH GENERATION');
        console.log('   Source: AI analysis of video title and content');
        console.log('   Quality: Basic context analysis with generic styles');
      }
      
      // Step 4: Test the decision logic
      const mockVideoData = {
        title: videoDetails.title,
        transcriptText: `Mock transcript for ${videoDetails.title}`,
        optimizedScript: `Mock optimized script for ${videoDetails.title}`
      };
      
      // This would normally generate thumbnails, but we'll just test the context generation
      let baseContext;
      if (conceptTest.concepts) {
        console.log('üìã Using stored concepts path...');
        baseContext = this.thumbnailService.parseStoredThumbnailConcepts(conceptTest.concepts, videoDetails.title);
        baseContext.usingStoredConcepts = true;
      } else {
        console.log('ü§ñ Using fresh generation path...');
        baseContext = await this.thumbnailService.generateThumbnailContext(videoDetails.title, mockVideoData.transcriptText);
        baseContext.usingStoredConcepts = false;
      }
      
      console.log(`‚úÖ Context generation test completed:`);
      console.log(`   Using stored concepts: ${baseContext.usingStoredConcepts ? 'YES' : 'NO'}`);
      console.log(`   Main theme: ${baseContext.mainTheme}`);
      console.log(`   Emotional tone: ${baseContext.emotionalTone}`);
      console.log(`   Key elements: ${baseContext.keyElements.slice(0, 3).join(', ')}...`);
      
      return {
        success: true,
        videoDetails,
        storedConcepts: conceptTest.concepts,
        usingStoredConcepts: baseContext.usingStoredConcepts,
        contextGenerated: true
      };
      
    } catch (error) {
      console.log(`‚ùå Full integration test failed for ${videoId}:`, error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * Test integration with multiple videos to show comparison
   */
  async testMultiVideoComparison() {
    console.log('üß™ Testing integration with multiple videos...');
    
    try {
      // Get approved videos
      const approvedVideos = await this.googleSheetsService.getVideosWithApprovedScripts();
      console.log(`üìä Found ${approvedVideos.length} approved videos`);
      
      const results = [];
      
      // Test first 3 videos
      const testVideos = approvedVideos.slice(0, 3);
      
      for (const video of testVideos) {
        console.log(`\n--- Testing ${video.videoId}: ${video.title} ---`);
        const result = await this.testFullIntegration(video.videoId);
        results.push({
          videoId: video.videoId,
          title: video.title,
          ...result
        });
      }
      
      // Summary
      console.log('\n' + '='.repeat(60));
      console.log('üìä INTEGRATION TEST RESULTS SUMMARY');
      console.log('='.repeat(60));
      
      const withStoredConcepts = results.filter(r => r.usingStoredConcepts).length;
      const withFreshGeneration = results.filter(r => !r.usingStoredConcepts).length;
      
      console.log(`‚úÖ Videos with stored concepts: ${withStoredConcepts}`);
      console.log(`ü§ñ Videos with fresh generation: ${withFreshGeneration}`);
      console.log(`üìà Integration working: ${results.filter(r => r.success).length}/${results.length}`);
      
      results.forEach(result => {
        const status = result.success ? '‚úÖ' : '‚ùå';
        const source = result.usingStoredConcepts ? 'üìã Stored' : 'ü§ñ Fresh';
        console.log(`   ${status} ${result.videoId}: ${source}`);
      });
      
      console.log('='.repeat(60));
      
      return results;
      
    } catch (error) {
      console.log('‚ùå Multi-video comparison test failed:', error.message);
      throw error;
    }
  }
}

async function main() {
  const args = process.argv.slice(2);
  
  if (args.length === 0) {
    console.log('Thumbnail Concepts Integration Tester');
    console.log('');
    console.log('Usage:');
    console.log('  --test-video VIDEO_ID    Test integration with specific video');
    console.log('  --test-parsing           Test concept parsing with mock data');
    console.log('  --test-integration       Test full integration flow');
    console.log('  --test-comparison        Test with multiple videos for comparison');
    console.log('');
    console.log('Examples:');
    console.log('  node tools/test-thumbnail-concepts-integration.js --test-video VID-0001');
    console.log('  node tools/test-thumbnail-concepts-integration.js --test-parsing');
    console.log('  node tools/test-thumbnail-concepts-integration.js --test-integration');
    process.exit(1);
  }

  const tester = new ThumbnailConceptsIntegrationTester();
  
  try {
    const command = args[0];
    const videoId = args[1];
    
    switch (command) {
      case '--test-video':
        if (!videoId) {
          console.log('‚ùå Video ID required for --test-video command');
          process.exit(1);
        }
        await tester.testFullIntegration(videoId);
        break;
        
      case '--test-parsing':
        await tester.testConceptParsing();
        break;
        
      case '--test-integration':
        // Find a video with stored concepts
        const approvedVideos = await tester.googleSheetsService.getVideosWithApprovedScripts();
        if (approvedVideos.length > 0) {
          await tester.testFullIntegration(approvedVideos[0].videoId);
        } else {
          console.log('‚ùå No approved videos found for testing');
        }
        break;
        
      case '--test-comparison':
        await tester.testMultiVideoComparison();
        break;
        
      default:
        console.log(`‚ùå Unknown command: ${command}`);
        process.exit(1);
    }
    
    console.log('\n‚úÖ Thumbnail concepts integration testing completed successfully');
    
  } catch (error) {
    console.log('\n‚ùå Integration testing failed:', error.message);
    console.log('\nStack trace:', error.stack);
    process.exit(1);
  }
}

// Handle graceful shutdown
process.on('SIGINT', () => {
  console.log('Received SIGINT, shutting down gracefully...');
  process.exit(0);
});

main().catch(error => {
  console.log('Unhandled error in integration testing:', error);
  process.exit(1);
});